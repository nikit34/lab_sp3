#lang racket
(define variant 13)
(define last-digit-of-group-number 6)
(define kinds-of-coins 5)

(define (implication? x? y?)
  (or (not x?) y?)
  )

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((implication? (>= amount 0) (= kinds-of-coins 0)) 0)
        (else (+ (cc amount (- kinds-of-coins 1)) (cc (- amount (first-denomination kinds-of-coins)) kinds-of-coins)))
        )
  )

(define (count-change amount kinds-of-coins)
  (display "count-change for ")
  amount
  (display " ")
  kinds-of-coins
  (display " \t= ")
  (cond ((and (> amount 0) (> kinds-of-coins 0) (> (first-denomination kinds-of-coins) 0)) (cc amount kinds-of-coins))
        (else (display "(improper parametr value) ") 0)
        )
  )

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 2)
        ((= kinds-of-coins 3) 3)
        ((= kinds-of-coins 4) 5)
        ((= kinds-of-coins 5) 10)
        (else 0)
        )
  )

(define (gr-amount)
  (remainder (+ (* 100 last-digit-of-group-number) variant) 137)
  )
  

(display "KMM variant ")
variant
(newline)
(display "1-2-3-5-10")
(newline)
(count-change 100 kinds-of-coins)
(newline)
(count-change (gr-amount) kinds-of-coins)
(newline)
(count-change 100 100)
(newline)